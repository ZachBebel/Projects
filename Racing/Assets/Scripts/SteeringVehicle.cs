using UnityEngine;
using System.Collections;
using System.Collections.Generic;


[RequireComponent(typeof(Steer))]
[RequireComponent(typeof(CharacterController))]


public class SteeringVehicle : MonoBehaviour {

//movement variables - exposed in inspector panel
	private GameObject target  = null;
	
	//reference to an list of PATH waypoints
	private List<GameObject> path;
	
	// These weights will be exposed in the Inspector window

	
	public float gravity = 20.0f; // keep us grounded
	
	// Each vehicle contains a CharacterController which helps to deal with
	// the relationship between movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController characterController;
	
	// the SteeringAttributes holds several variables needed for steering
	private SteeringAttributes attr;

	// the Steer component implements the basic steering functions
	private Steer steer;
	
	private float maxSpeed;
	private float timer;
	
	private int index;
	
	private int waypointCount;
	
	private GameObject overtakeTarget;
	private GameObject previousOvertakeTarget;
	private bool stopSeek;
	
	//CARS
	private List<GameObject> racecars;

	private Vector3 acceleration;	//change in velocity per second
	private Vector3 velocity;		//change in position per second
	
	public Vector3 Velocity {
		get { return velocity; }
		set { velocity = value;}
	}

	public GameObject Target {
		get { return target; }
		set { target = value;}
	}
	
	public GameObject OvertakeTarget {
		get { return overtakeTarget; }
		set { overtakeTarget = value;}
	}

	public GameObject PreviousOvertakeTarget {
		get { return previousOvertakeTarget; }
		set { previousOvertakeTarget = value;}
	}
	
	public float MaxSpeed {
		get { return maxSpeed; }
		set { maxSpeed = value;}
	}

	public float Timer {
		get { return timer; }
		set { timer = value;}
	}
	
	public int Index {
		get { return index; }
		set { index = value;}
	}

	public bool StopSeek {
		get { return stopSeek; }
		set { stopSeek = value;}
	}
	
	public List<GameObject> Path {
		get { return path; }
		set { path = value;}
	}
	
	public List<GameObject> Racecars {
		get { return racecars; }
		set { racecars = value;}
	}
	
	void Start ()
	{
		acceleration = Vector3.zero;
		velocity = transform.forward;
		index = 0;
		waypointCount = 0;
		stopSeek = false;
		
		//get component references
		//racecars = GameObject.Find("MainGO").GetComponent<GameManager>().racecars;
		//path = GameObject.Find("MainGO").GetComponent<GameManager>().path;
		//Debug.Log(path.Count);
		//Debug.Log(racecars.Count);
		characterController = gameObject.GetComponent<CharacterController> ();
		steer = gameObject.GetComponent<Steer> ();
		attr = GameObject.Find("MainGO").GetComponent<SteeringAttributes> ();
	}
	
	void Update ()
	{
		CalcSteeringForce ();
		
		//update velocity
		velocity += acceleration * Time.deltaTime;
		velocity.y = 0;	// we are staying in the x/z plane
		velocity = Vector3.ClampMagnitude (velocity, maxSpeed);
		
		//orient the transform to face where we going
		if (velocity != Vector3.zero)
			transform.forward = velocity.normalized;

		// keep us grounded
		velocity.y -= gravity * Time.deltaTime;

		// the CharacterController moves us subject to physical constraints
		characterController.Move (velocity * Time.deltaTime);
		
		//reset acceleration for next cycle
		acceleration = Vector3.zero;
	}
	
	
	//calculate and apply steering forces
	private void CalcSteeringForce ()
	{ 
		
		Vector3 force = Vector3.zero;

		
	 
		//in bounds
		//force += attr.inBoundsWt * steer.StayInBounds (198, Vector3.zero, maxSpeed);
		
		//attempt to overtake
		force += attr.seekWt/3 * steer.Overtake(racecars, path, this);
		
		//follow path
		force += attr.seekWt * steer.FollowPath(path, velocity, maxSpeed, this, index);
		Debug.DrawRay (transform.position, force, Color.cyan);
		//seek target
		//force += attr.seekWt * steer.Seek(target.transform.position, maxSpeed);
		
		//separate
		force += attr.separateWt * steer.Separate(racecars, velocity, maxSpeed);
		
		//align
		//force += attr.alignWt * steer.Align(racecars, velocity, maxSpeed);
		
		//cohere
		//force += attr.cohereWt * steer.Cohere(racecars, maxSpeed);
		
		force = Vector3.ClampMagnitude (force, attr.maxForce);
		ApplyForce(force);
	}

	
	private void ApplyForce (Vector3 steeringForce)
	{
		acceleration += steeringForce/attr.mass;
	}
	
	private void CalcWaypointCount()
	{
		GameObject currentWaypoint = path[0];
		foreach(GameObject waypoint in path)
		{
			if(Vector3.Distance(transform.position, waypoint.transform.position) > 10) {}
		}
	}
}
